@using static Generic.ButtonEl;
@using static Utilities.RequestStatus;
@using Statistics.Shared
@using Statistics.Client.Utilities

@inject HttpClient Http

<div class="card exerciseCard-card">
    <div class="content">
        <div class="header">@Name</div>
        <div class="meta">@Phase</div>

        <div class="ui labeled input mini exerciseCard-dropdownWithLabel">
            <div class="ui label">
                weight
            </div>
            <input type="text"
                   placeholder="set weight"
                   @bind="@Weight" 
                   @onclick="@RemoveStatusPopup" />
        </div>

        <Dropdown ClassName="exerciseCard-dropdown"
                  PlaceholderText="Repetitions"
                  SelectOptions=@(new List<object> {"3", "4", "5"}) 
                  @bind-Value="@Repetitions" />

        <Dropdown ClassName="exerciseCard-dropdown"
                  PlaceholderText="Add weight next time?"
                  SelectOptions=@(new List<object> {"no", "1.5", "2.5"}) 
                  @bind-Value="@ShouldAddWeight" />
        
        <div class="exerciseCard-button">
            <ButtonEl Text="Submit"
                      Type="ButtonType.Secondary"
                      Size="ButtonSize.Mini"
                      OnClick="@OnSubmit" />


            <RequestStatusPopup Text=@((forOk:"Exercise Submitted!", 
                                         forUpdated:"Exercise Updated!", 
                                         forError:"Same values in db for this ex!"))
                                StatusFor="@SubmitStatus" />

        </div>
    </div>
</div>

<style>
    .exerciseCard-card {
        width:19rem;
    }
    .exerciseCard-button {
        padding-top: 1rem;
    }
    .exerciseCard-dropdownWithLabel {
        padding-top:1rem;
        width:7rem;
    }
    .exerciseCard-dropdown {
        padding-top: 1rem;
    }
</style>

@code {
    //todo: add edit button and logic
    #region fields
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public int Number { get; set; }

    [Parameter]
    public string Phase { get; set; }
    [Parameter]
    public string Evaluation { get; set; }

    [Parameter]
    public DateTime SubmitDate { get; set; }

    private string Weight { get; set; }

    private string _shouldAddWeight;

    string ShouldAddWeight
    {
        get => _shouldAddWeight;
        set
        {
            _shouldAddWeight = value;
            RemoveStatusPopup();
        }
    }

    private string _repetitions;

    string Repetitions
    {
        get => _repetitions;
        set
        {
            _repetitions = value;
            RemoveStatusPopup();
        }
    }

    private Status _submitStatus;

    private Status SubmitStatus
    {
        get => _submitStatus;
        set
        {
            _submitStatus = value;
            StateHasChanged();
        }
    }
    #endregion
    
    #region lifecycle
    protected override void OnParametersSet()
    {
        StateHasChanged();
        RemoveStatusPopup();
    }
    #endregion
    
    #region functions
    void RemoveStatusPopup()
    {
        SubmitStatus = Status.Unsubmitted;
    }

    async void OnSubmit(UIMouseEventArgs e)
    {
        var workout = new Workout
        {
            DayOfWeek = SubmitDate.AddDays(1).DayOfWeek.ToString(),
            Phase = Phase,
            SubmitDate = SubmitDate.AddDays(1),
            Evaluation = Evaluation,
            Exercises = new List<Exercise>
            {
                new Exercise
                {
                    Name = Name,
                    Number = Number,
                    Weight = Weight,
                    ShouldAddWeight = ShouldAddWeight,
                    Repetitions = Repetitions
                }
            }
        };
        
        await PostExercise(workout);
    }
    #endregion
    
    #region requests
    //todo: abstract these calls into the service
    private async Task PostExercise(Workout workout)
    {
        var responseCode = await Http.PostJsonAsync<RequestStatus.Status>("/api/workouts", workout);
        SubmitStatus = responseCode;

        Console.WriteLine($"code:{responseCode}");
    }
    #endregion
}
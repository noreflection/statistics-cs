@using static Generic.ButtonEl;
@using static Generic.PointingLabel;
@using Statistics.Shared
@inject HttpClient Http

<div class="card excersizecard-card">
    <div class="content">
        <div class="header">@Name</div>
        <div class="meta">@Phase</div>

        <div class="ui labeled input mini excersizecard-dropdownwithlabel">
            <div class="ui label">
                weight
            </div>
            <input type="text"
                   placeholder="set weight"
                   @bind=@Weight
                   @onclick=@RemoveStatusPopup />
        </div>

        <Dropdown ClassName="excersizecard-dropdown"
                  PlaceholderText="Repetitions"
                  SelectOptions=@(new List<object> {"3", "4", "5"})
                  @bind-Value=@Repetitions />

        <Dropdown ClassName="excersizecard-dropdown"
                  PlaceholderText="Add weight next time?"
                  SelectOptions=@(new List<object> {"no", "1.5", "2.5"})
                  @bind-Value=@ShouldAddWeight />

        <div class="excersizecard-button">
            <ButtonEl Text="Submit"
                      Type=ButtonType.Secondary
                      Size=ButtonSize.Mini
                      OnClick=@OnSubmit />

            @if (submitStatus == SubmitStatus.Ok)
            {
                <PointingLabel Text="Submitted!"
                               Color=PointingColor.Green />
            }
            @if (submitStatus == SubmitStatus.Updated)
            {
                <PointingLabel Text="Updated!"
                               Color=PointingColor.Blue />
            }
            @if (submitStatus == SubmitStatus.Error)
            {
                <PointingLabel Text="Error!"
                               Color=PointingColor.Red />
            }

        </div>
    </div>
</div>

@code {
    #region fields
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Phase { get; set; }

    [Parameter]
    public DateTime SubmitDate { get; set; }

    private string Weight { get; set; }

    private string _shouldAddWeight;
    string ShouldAddWeight
    {
        get => _shouldAddWeight;
        set
        {
            _shouldAddWeight = value;
            RemoveStatusPopup();
        }
    }

    private string _repetitions;
    string Repetitions
    {
        get => _repetitions;
        set
        {
            _repetitions = value;
            RemoveStatusPopup();
        }
    }

    private enum SubmitStatus { Unsubmitted, Ok, Updated, Error }
    private SubmitStatus _submitStatus;
    private SubmitStatus submitStatus
    {
        get => _submitStatus;
        set
        {
            _submitStatus = value;
            StateHasChanged();
        }
    }
    #endregion

    #region lifecycle
    protected override void OnParametersSet()
    {
        RemoveStatusPopup();
    }
    #endregion

    #region functions
    void RemoveStatusPopup()
    {
        submitStatus = SubmitStatus.Unsubmitted;
    }

    async void OnSubmit(UIMouseEventArgs e)
    {
        var exercise = new Exercise
        {
            Name = Name,
            Phase = this.Phase,
            Weight = this.Weight,
            DayOfWeek = this.SubmitDate.DayOfWeek.ToString(),
            ShouldAddWeight = this.ShouldAddWeight,
            Repetitions = this.Repetitions,
            SubmitDate = SubmitDate.ToLocalTime(),
        };

        Console.WriteLine($"" +
            $"name{exercise.Name}" +
            $"weekday:{exercise.DayOfWeek}" +
            $"modelweight:{exercise.Weight} " +
            $"modelreps:{exercise.Repetitions} " +
            $"date:{exercise.SubmitDate}");

        await PostExercise(exercise);
    }
    #endregion

    #region requests
    //todo: abstract these calls into the service
    public async Task PostExercise(Exercise exercise)
    {
        var responceCode = await Http.PostJsonAsync<int>("/api/exercises", exercise);

        submitStatus = responceCode switch
        {
            0 => SubmitStatus.Error,
            1 => SubmitStatus.Ok,
            2 => SubmitStatus.Updated,
            _ => SubmitStatus.Unsubmitted,
        };

        Console.WriteLine($"respcode:{responceCode}");
    }
    #endregion
}